# Flutter 프로젝트 AI 규칙

## 코딩 스타일
- 모든 코드는 한국어 주석으로 작성하세요
- 변수명과 함수명은 camelCase를 사용하세요
- 클래스명은 PascalCase를 사용하세요
- 상수는 UPPER_SNAKE_CASE를 사용하세요
- 들여쓰기는 2칸 스페이스를 사용하세요
- inline 코드는 가능한 피하세요

## Flutter 특화 규칙
- 위젯은 항상 const 생성자를 사용하세요 (가능한 경우)
- StatelessWidget과 StatefulWidget을 적절히 구분해서 사용하세요
- setState() 호출 시 불필요한 리빌드를 방지하세요
- 위젯 트리를 최적화하여 성능을 고려하세요

## 파일 구조 규칙
- lib/ 폴더 내에서 기능별로 모듈화하세요
- 각 모듈은 binding, controller, view 파일로 구성하세요
- 공통 위젯은 shared/ 폴더에 배치하세요
- 상수는 constants/ 폴더에 정의하세요

## 상태 관리
- GetX 패턴을 사용하세요 (binding, controller, view)
- 컨트롤러는 비즈니스 로직만 처리하세요
- UI 로직은 view에서 처리하세요
- 의존성 주입은 binding에서 관리하세요

## 네이밍 규칙
- 파일명은 snake_case를 사용하세요 (예: user_profile.dart)
- 클래스명은 PascalCase를 사용하세요 (예: UserProfile)
- 변수명은 camelCase를 사용하세요 (예: userName)
- 상수는 UPPER_SNAKE_CASE를 사용하세요 (예: API_BASE_URL)

## 에러 처리
- try-catch 블록을 사용하여 예외를 처리하세요
- 사용자에게 적절한 에러 메시지를 표시하세요
- 네트워크 에러와 로컬 에러를 구분해서 처리하세요

## 성능 최적화
- ListView.builder를 사용하여 대용량 리스트를 처리하세요
- 이미지는 적절한 크기로 압축하여 사용하세요
- 불필요한 위젯 리빌드를 방지하세요
- 메모리 누수를 방지하기 위해 dispose()를 적절히 호출하세요

## 테스트
- 중요한 비즈니스 로직에 대한 단위 테스트를 작성하세요
- 위젯 테스트를 통해 UI 동작을 검증하세요
- 테스트 파일명은 _test.dart 접미사를 사용하세요

## 코드 품질
- DRY (Don't Repeat Yourself) 원칙을 따르세요
- 함수는 단일 책임 원칙을 지키세요
- 복잡한 로직은 별도 함수로 분리하세요
- 매직 넘버는 상수로 정의하세요

## 주석 작성
- 복잡한 로직에는 한국어 주석을 추가하세요
- 함수의 목적과 매개변수를 설명하세요
- TODO, FIXME, NOTE 태그를 적절히 사용하세요
